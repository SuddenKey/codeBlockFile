<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>- (void)setUpAvplayer {
    NSString *url = &lt;#urlString#&gt;;
    
    AVPlayerItem *player = [AVPlayerItem playerItemWithURL:[NSURL URLWithString:url]];
    //创建播放器
    &lt;#AVPlayer#&gt; = [AVPlayer playerWithPlayerItem:player];
    //创建视频显示的图层
    AVPlayerLayer *showVodioLayer = [AVPlayerLayer playerLayerWithPlayer:&lt;#AVPlayer#&gt;];
    showVodioLayer.frame = self.view.frame;
    [self.view.layer addSublayer:showVodioLayer];
    [&lt;#AVPlayer#&gt; play];
    
    //获得播放结束的状态 -&gt; 通过发送通知的形式获得 -&gt;AVPlayerItemDidPlayToEndTimeNotification
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(itemDidPlayToEndTime:) name:AVPlayerItemDidPlayToEndTimeNotification object:nil];
    //只要可以获得到当前视频元素准备好的状态 就可以得到总时长 //采取KVO的形式获得视频总时长 //通过监视status 判断是否准备好 -&gt; 获得
    [player addObserver:self forKeyPath:@"status" options:NSKeyValueObservingOptionNew context:nil];
    
}

//当status的值改变的时候会调用这个方法
 -(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSString *,id&gt; *)change context:(void *)context{
     NSLog(@"%@",change[@"new"]);
     AVPlayerItemStatus status = [change[@"new"] integerValue];
     switch (status) {
         case AVPlayerItemStatusUnknown:{
             NSLog(@"未知状态");
             break;
         }
         case AVPlayerItemStatusReadyToPlay:{
             NSLog(@"视频的总时长%f", CMTimeGetSeconds(_avplayer.currentItem.duration));
             break;
         }
         case AVPlayerItemStatusFailed: {
             NSLog(@"加载失败");
             break;
         }
     }
 }

//快进
-(void)touchesMoved:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event{
    //快进
    //跳到某一个进度的方法：seekToTime:
    //得到当前的时间 + 快进的时间 //获得当前播放的时间 （秒）
    Float64 cur = CMTimeGetSeconds(&lt;#AVPlayer#&gt;.currentTime); cur ++; [&lt; seekToTime:CMTimeMake(cur, 1)];
}

-(void)itemDidPlayToEndTime:(NSNotification *)not{
    NSLog(@"播放结束");
    [&lt;#AVPlayer#&gt; seekToTime:kCMTimeZero];
}

#pragma mark -----控制器播放 
-(void)demo2{
    //1、创建AVPlayer
    /* 本地视频 NSURL *url = [[NSBundle mainBundle]URLForResource:@"IMG_9638.m4v" withExtension:nil]; AVPlayer *player = [AVPlayer playerWithURL:url]; */
    //网页视频
    AVPlayer *player1 = [AVPlayer playerWithURL:[NSURL URLWithString:@"http://localhost/db/PHP%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE/PHP%E8%8E%B7%E5%8F%96%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F.mp4"]];
    //2、创建视频播放视图的控制器
    AVPlayerViewController *playerVC = [[AVPlayerViewController alloc]init];
    //3、将创建的AVPlayer赋值给控制器自带的player
    playerVC.player = player1;
    //4、跳转到控制器播放
    [self presentViewController:playerVC animated:YES completion:nil];
    [playerVC.player play];
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>41B521EE-FD83-4FB5-A312-04738F29F8CE</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetTitle</key>
	<string>newPlayer</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
